using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Text;
using System.Collections.Generic;
using DAL;
using Model;
using System.Security.Cryptography;
using System.Runtime.Remoting.Contexts;
using System.Data.SqlClient;

/// <summary>
/// UserSystem 的摘要说明
/// </summary>
namespace BLL
{
    public class BllSection
    {
        DalSectionInfo dal = new DalSectionInfo();
        DalUser daluser = new DalUser();
        DalJobInformation daljob = new DalJobInformation();
        //创建集团报表管理类
        public SectionReport CreateSectionReport()
        {
            SectionReport report = new SectionReport();
            string rootID = "0";
            SectionInfoEntry root = dal.GetInfoByKey(rootID);
            report.sectioninfo = root;
            GetGroup(report);
            GetSubSection(report);
            return report;
        }
        //获得集团下的所有用户组
        public void GetGroup(SectionReport report)
        {
            string sectionid = report.sectioninfo.SectionID;
            DalSectionGroup dalsectiongroup = new DalSectionGroup();
            List<GroupEntry> grouplist = dalsectiongroup.getAllGroupList(sectionid);

            foreach (GroupEntry group in grouplist)
            {
                SectionGroupReport groupReport = new SectionGroupReport();
                groupReport.groupinfo = group;
                report.AddGroupReport(groupReport);
            }

            //查询group下的所有用户
            foreach (SectionGroupReport groupreport in report.grouplist)
            {
                SectionGroupReport groupReport = new SectionGroupReport();
                List<JobInformationCSVModel> userreportlist = daluser.getGroupUserVList(groupreport.groupinfo.ID);
                groupreport.userreportlist = userreportlist;

            }


        }
        public void GetSubSection(SectionReport report)
        {
            List<SectionInfoEntry> subSectionlist = dal.getSubSectionInfo(report.sectioninfo.SectionID);
            foreach (SectionInfoEntry section in subSectionlist)
            {
                SectionReport sectionreport = new SectionReport();
                sectionreport.sectioninfo = section;
                report.AddSectionReport(sectionreport);
            }

            //查询sub组和sub集团
            foreach (SectionReport subreport in report.sectionlist)
            {
                GetGroup(subreport);
                GetSubSection(subreport);
            }

        }

        public List<SectionJobCSVModel> getSectionReportCSVList(SectionReport report, DateTime START_TIME, DateTime END_TIME, string SerialNumber, int Dsp_Count_mode, int Dsp_A3_A4)
        {
            List<SectionJobCSVModel> jobList = new List<SectionJobCSVModel>();

            GetGroupCSV(report, jobList, START_TIME, END_TIME, SerialNumber, Dsp_Count_mode, Dsp_A3_A4);
            GetSubSectionCSV(report, jobList, START_TIME, END_TIME, SerialNumber, Dsp_Count_mode, Dsp_A3_A4);
            return jobList;
        }
        //获得集团下的所有用户组
        public SectionJobCSVModel GetGroupCSV(SectionReport report, List<SectionJobCSVModel> jobList, DateTime START_TIME, DateTime END_TIME, string SerialNumber, int Dsp_Count_mode, int Dsp_A3_A4)
        {
            SectionJobCSVModel sectioncsv = new SectionJobCSVModel();
            sectioncsv.type = "集团";
            sectioncsv.SectionID = report.sectioninfo.SectionID;
            sectioncsv.SectionName = report.sectioninfo.SectionName;
            sectioncsv.level = report.sectioninfo.Level;
            jobList.Add(sectioncsv);

            //查询group下的所有用户
            foreach (SectionGroupReport groupreport in report.grouplist)
            {
                List<JobInformationCSVModel> userreportlist = groupreport.userreportlist;
                List<SectionJobCSVModel> list = GetUserJobDict(userreportlist, START_TIME, END_TIME, SerialNumber, Dsp_Count_mode, Dsp_A3_A4);

                SectionJobCSVModel csvgroup = new SectionJobCSVModel();
                csvgroup.type = "用户组";
                csvgroup.SectionID = report.sectioninfo.SectionID;
                csvgroup.SectionName = report.sectioninfo.SectionName;
                csvgroup.level = report.sectioninfo.Level;
                jobList.Add(csvgroup);

                foreach (SectionJobCSVModel csvmodel in list)
                {
                    csvmodel.type = "用户";
                    csvmodel.SectionID = report.sectioninfo.SectionID;
                    csvmodel.SectionName = report.sectioninfo.SectionName;
                    csvmodel.level = report.sectioninfo.Level;
                    jobList.Add(csvmodel);
                    //把csvmodel值加到csvgroup

                    //
                }
                //把csvgroup值加到sectioncsv

                //

            }
            return sectioncsv;

        }
        public void GetSubSectionCSV(SectionReport report,List<SectionJobCSVModel> jobList,DateTime START_TIME, DateTime END_TIME, string SerialNumber, int Dsp_Count_mode, int Dsp_A3_A4)
        {
            //查询sub集团
            SectionJobCSVModel csvmodel = new SectionJobCSVModel();
            csvmodel.type = "集团";
            csvmodel.SectionID = report.sectioninfo.SectionID;
            csvmodel.SectionName = report.sectioninfo.SectionName;
            csvmodel.level = report.sectioninfo.Level;
            jobList.Add(csvmodel);
            foreach (SectionReport subreport in report.sectionlist)
            {

                SectionJobCSVModel sectioncsv = GetGroupCSV(report, jobList, START_TIME, END_TIME, SerialNumber, Dsp_Count_mode, Dsp_A3_A4);
                //sectioncsv的和保存到csvmodel
                //
            }

        }


        
        //用户统计
         public List<SectionJobCSVModel> GetUserJobDict(List<JobInformationCSVModel> idlist, DateTime START_TIME, DateTime END_TIME, string SerialNumber, int Dsp_Count_mode, int Dsp_A3_A4)
        {
            List<SectionJobCSVModel> jobList = new List<SectionJobCSVModel>();
            foreach (JobInformationCSVModel bean in idlist)
            {

                JobInformationCSVModel row = daljob.getUserJobInfomation(bean.UserID, START_TIME, END_TIME, SerialNumber, Dsp_Count_mode, Dsp_A3_A4);
                if (row != null)
                {
                    row.UserID = bean.UserID;
                    row.UserName = bean.UserName;
                    row.LoginName = bean.LoginName;
                    row.GroupID = bean.GroupID;
                    row.GroupName = bean.GroupName;
                    SectionJobCSVModel csvmodel = new SectionJobCSVModel();
                    csvmodel.csvmodel = row;
                    jobList.Add(csvmodel);
                }
            }
            return jobList;
        }
    }
}
